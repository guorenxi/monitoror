// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	monitorormodels "github.com/monitoror/monitoror/models"
	models "github.com/monitoror/monitoror/monitorables/http/api/models"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// HTTPFormatted provides a mock function with given fields: params
func (_m *Usecase) HTTPFormatted(params *models.HTTPFormattedParams) (*monitorormodels.Tile, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for HTTPFormatted")
	}

	var r0 *monitorormodels.Tile
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.HTTPFormattedParams) (*monitorormodels.Tile, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*models.HTTPFormattedParams) *monitorormodels.Tile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monitorormodels.Tile)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.HTTPFormattedParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HTTPRaw provides a mock function with given fields: params
func (_m *Usecase) HTTPRaw(params *models.HTTPRawParams) (*monitorormodels.Tile, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for HTTPRaw")
	}

	var r0 *monitorormodels.Tile
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.HTTPRawParams) (*monitorormodels.Tile, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*models.HTTPRawParams) *monitorormodels.Tile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monitorormodels.Tile)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.HTTPRawParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HTTPStatus provides a mock function with given fields: params
func (_m *Usecase) HTTPStatus(params *models.HTTPStatusParams) (*monitorormodels.Tile, error) {
	ret := _m.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for HTTPStatus")
	}

	var r0 *monitorormodels.Tile
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.HTTPStatusParams) (*monitorormodels.Tile, error)); ok {
		return rf(params)
	}
	if rf, ok := ret.Get(0).(func(*models.HTTPStatusParams) *monitorormodels.Tile); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*monitorormodels.Tile)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.HTTPStatusParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
