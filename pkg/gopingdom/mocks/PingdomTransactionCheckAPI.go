// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	pingdom "github.com/jsdidierlaurent/go-pingdom/pingdom"
	mock "github.com/stretchr/testify/mock"
)

// PingdomTransactionCheckAPI is an autogenerated mock type for the PingdomTransactionCheckAPI type
type PingdomTransactionCheckAPI struct {
	mock.Mock
}

// List provides a mock function with given fields: params
func (_m *PingdomTransactionCheckAPI) List(params ...map[string]string) ([]pingdom.TransactionCheckResponse, error) {
	_va := make([]interface{}, len(params))
	for _i := range params {
		_va[_i] = params[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []pingdom.TransactionCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(...map[string]string) ([]pingdom.TransactionCheckResponse, error)); ok {
		return rf(params...)
	}
	if rf, ok := ret.Get(0).(func(...map[string]string) []pingdom.TransactionCheckResponse); ok {
		r0 = rf(params...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pingdom.TransactionCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(...map[string]string) error); ok {
		r1 = rf(params...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Read provides a mock function with given fields: id
func (_m *PingdomTransactionCheckAPI) Read(id int) (*pingdom.TransactionCheckResponse, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *pingdom.TransactionCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*pingdom.TransactionCheckResponse, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *pingdom.TransactionCheckResponse); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pingdom.TransactionCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPingdomTransactionCheckAPI creates a new instance of PingdomTransactionCheckAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPingdomTransactionCheckAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *PingdomTransactionCheckAPI {
	mock := &PingdomTransactionCheckAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
