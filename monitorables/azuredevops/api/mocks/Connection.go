// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	build "github.com/jsdidierlaurent/azure-devops-go-api/azuredevops/build"
	mock "github.com/stretchr/testify/mock"

	release "github.com/jsdidierlaurent/azure-devops-go-api/azuredevops/release"
)

// Connection is an autogenerated mock type for the Connection type
type Connection struct {
	mock.Mock
}

// GetBuildConnection provides a mock function with given fields:
func (_m *Connection) GetBuildConnection() (build.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBuildConnection")
	}

	var r0 build.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (build.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() build.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(build.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReleaseConnection provides a mock function with given fields:
func (_m *Connection) GetReleaseConnection() (release.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetReleaseConnection")
	}

	var r0 release.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (release.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() release.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(release.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewConnection creates a new instance of Connection. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnection(t interface {
	mock.TestingT
	Cleanup(func())
}) *Connection {
	mock := &Connection{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
