// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	models "github.com/monitoror/monitoror/api/config/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetConfigFromPath provides a mock function with given fields: baseDir, filePath
func (_m *Repository) GetConfigFromPath(baseDir string, filePath string) (*models.Config, error) {
	ret := _m.Called(baseDir, filePath)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigFromPath")
	}

	var r0 *models.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Config, error)); ok {
		return rf(baseDir, filePath)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Config); ok {
		r0 = rf(baseDir, filePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(baseDir, filePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigFromURL provides a mock function with given fields: url
func (_m *Repository) GetConfigFromURL(url string) (*models.Config, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigFromURL")
	}

	var r0 *models.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Config, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Config); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
