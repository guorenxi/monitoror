// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/github"

	mock "github.com/stretchr/testify/mock"
)

// GitService is an autogenerated mock type for the GitService type
type GitService struct {
	mock.Mock
}

// GetCommit provides a mock function with given fields: ctx, owner, repo, sha
func (_m *GitService) GetCommit(ctx context.Context, owner string, repo string, sha string) (*github.Commit, *github.Response, error) {
	ret := _m.Called(ctx, owner, repo, sha)

	if len(ret) == 0 {
		panic("no return value specified for GetCommit")
	}

	var r0 *github.Commit
	var r1 *github.Response
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*github.Commit, *github.Response, error)); ok {
		return rf(ctx, owner, repo, sha)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *github.Commit); ok {
		r0 = rf(ctx, owner, repo, sha)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.Commit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) *github.Response); ok {
		r1 = rf(ctx, owner, repo, sha)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*github.Response)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string) error); ok {
		r2 = rf(ctx, owner, repo, sha)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewGitService creates a new instance of GitService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitService {
	mock := &GitService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
